<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>





<head>
<title>JSIMgraph</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<meta name="generator" content="RoboHelp by eHelp Corporation www.ehelp.com">
<link rel="stylesheet" href="default.css"><style title="hcp" type="text/css">
<!--
ul.hcp1 { list-style:disc; }
-->
</style>
</head>
<body>
<h1>Introduction to JSIMgraph</h1>

<p>_______________________________</p>

<p>&nbsp;</p>

<p><img src="image/logo.jpg"
		x-maintain-ratio=TRUE
		style="border: none;
				width: 86px;
				height: 51px;
				float: none;"
		width=86
		height=51
		border=0></p>

<p>&nbsp;</p>

<p>JSIMgraph: a graphical user-friendly interface for the simulator engine 
 used by JSIMwiz. </p>

<p>It integrates the same functionalities of JSIMwiz with an intuitive 
 graphical workspace. </p>

<p>This allows an easy description of network structure, as well as a simplified 
 definition of the execution features like blocking regions. </p>

<p>Network topologies can be exported in vectorial or raster image formats.</p>

<p>&nbsp;</p>

<p class="hcp1">Features</p>

<p>&nbsp;</p>

<p>What-if analyses, where a sequence of simulations is run for different 
 values of parameters, are also possible.</p>

<p>JSIM is the GUI front-end to JMT simulation engine. It allows the solution 
 of open, closed or mixed queuing networks. Arrival rates for open classes 
 and service times for stations can be randomly generated with the following 
 distributions:</p>

<ul type="disc" class="hcp1">
	
	<li class="kadov-p"><p>Constant</p></li>
	
	<li class="kadov-p"><p>Erlang</p></li>
	
	<li class="kadov-p"><p>Exponential</p></li>
	
	<li class="kadov-p"><p>Gamma</p></li>
	
	<li class="kadov-p"><p>Hyperexponential</p></li>
	
	<li class="kadov-p"><p>Normal</p></li>
	
	<li class="kadov-p"><p>Pareto</p></li>
	
	<li class="kadov-p"><p>Poisson</p></li>
	
	<li class="kadov-p"><p>Student-T</p></li>
	
	<li class="kadov-p"><p>Uniform</p></li>
</ul>

<p>&nbsp;</p>

<p>The following strategies are available for queuing:</p>

<ul type="disc" class="hcp1">
	
	<li class="kadov-p"><p>First Come First Served</p></li>
	
	<li class="kadov-p"><p>First Come First Served with priority</p></li>
	
	<li class="kadov-p"><p>Last Come First Served</p></li>
	
	<li class="kadov-p"><p>Last Come First Served with priority</p></li>
</ul>

<p>&nbsp;</p>

<p>While routing can be specified with the following strategies:</p>

<ul type="disc" class="hcp1">
	
	<li class="kadov-p"><p>Fastest service</p></li>
	
	<li class="kadov-p"><p>Least utilization</p></li>
	
	<li class="kadov-p"><p>Probability</p></li>
	
	<li class="kadov-p"><p>Random</p></li>
	
	<li class="kadov-p"><p>Round robin</p></li>
	
	<li class="kadov-p"><p>Shortest queue length</p></li>
	
	<li class="kadov-p"><p>Shortest response time</p></li>
</ul>

<p>&nbsp;</p>

<p>Some interesting additional features are:</p>

<ul type="disc" class="hcp1">
	
	<li class="kadov-p"><p>Load dependent service time strategies</p></li>
	
	<li class="kadov-p"><p>Drop Rule</p></li>
	
	<li class="kadov-p"><p>Support for parallelism via fork-join components</p></li>
	
	<li class="kadov-p"><p>Support for blocking regions</p></li>
	
	<li class="kadov-p"><p>Automated support for what-if analysis</p></li>
	
	<li class="kadov-p"><p>Customization of default values</p></li>
</ul>

<p>&nbsp;</p>

<p>Modular architecture based on Java reflection that allows the introduction 
 of new classes into the simulation engine without any modification to 
 other classes code.</p>

<p>Import/Export to and from JMVA</p>

<p>&nbsp;</p>

<p>Users will have an immediate graphical feedback of the selected performance 
 indices during simulation and engine will perform automatic on-line statistical 
 analysis of measured indices to discard initial transient and calculate 
 confidence intervals.</p>

<p>&nbsp;</p>

<p>Model definition is made by drawing the model</p>

<p>&nbsp;</p>

</body>
</html>
