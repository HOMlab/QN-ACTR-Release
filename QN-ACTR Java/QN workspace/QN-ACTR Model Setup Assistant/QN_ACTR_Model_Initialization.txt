;; comment symbols are ; and #| ... |#, same as ACT-R (Lisp)
;; For questions and comments, please send to Shi Cao (shicao@umich.edu).
;;
;; use QN-ACTR task description template here (if any). 
;;

(use_task_dbt_template   
	:method    	discrete_display_feedback_two_stages_method
	:response_terminates_display  t   		;;t by default
	:reset_all_modules_before_each_trial   nil   	;;nil by default	
	:auto_compute_default_response_correctness  t  	;;;nil by default	
)

(add_trials_from_discrete_display_feedback_two_stages_method
	:add_number_of_trials_per_block   1
	:number_of_responses_per_trial	1	
	
	( 
	:item_type   display_item_visual_text
	:visual_text   ( "B" "C" "D" "F" "G" "H" 
                              "J" "K" "L" "M" "N" "P" 
                              "Q" "R" "S" "T" "V" "W" 
                              "X" "Y" "Z")		;; NOTE, it works without "", but with "", upper cases will be kept.
	:correct_response_to_each_visual_text  
		(b c d f g h 
		j k l m n p
		q r s t v w
		x y z)		;; NOTE, key name does not have ""

	:text_randomization  without_replacement
	:display_item_screen_location_x  (125)
	:display_item_screen_location_y  (150)
	)
)
 



;;
;; For task-specific knowledge in the model, including declarative chunks, production rules, and parameters,
;; directly copy the contents from an ACT-R model file, within the (define-model model-name  ... ) here. just the ... part, do not need "(define-model model-name" and the ")".
;;
;;

;;ACT-R 6.0 Tutorial Unit2 demo2

(sgp :seed (123456 0))

(sgp :v t :needs-mouse nil :show-focus t :trace-detail high)

(chunk-type read-letters state)
(chunk-type array letter)

(add-dm 
 (start isa chunk) (attend isa chunk)
 (respond isa chunk) (done isa chunk)
 (goal isa read-letters state start))

(P find-unattended-letter
   =goal>
      ISA         read-letters
      state       start
 ==>
   +visual-location>
      ISA         visual-location
      :attended    nil
   =goal>
      state       find-location
)

(P attend-letter
   =goal>
      ISA         read-letters
      state       find-location
   =visual-location>
      ISA         visual-location
   
   ?visual>
      state        free
   
==>
   +visual>
      ISA         move-attention
      screen-pos  =visual-location
   =goal>
      state       attend
)

(P encode-letter
   =goal>
      ISA         read-letters
      state       attend
   =visual>
      ISA         text
      value       =letter
==>
   =goal>
      state       respond
  +imaginal>
      isa         array
      letter      =letter
)


(P respond
   =goal>
      ISA         read-letters
      state       respond
   =imaginal>
      isa         array
      letter      =letter
   ?manual>   
      state       free
==>
   =goal>
      state       done
   +manual>
      ISA         press-key
      key         =letter
)

(goal-focus goal)

(setf *actr-enabled-p* nil)
